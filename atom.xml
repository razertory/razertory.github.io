<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Razertory 的技术博客</title>
  
  <subtitle>一曲肝肠断，天涯何处觅知音</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://razertory.me/"/>
  <updated>2020-04-19T14:25:52.308Z</updated>
  <id>https://razertory.me/</id>
  
  <author>
    <name>Razertory</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「Linux 内核」中断</title>
    <link href="https://razertory.me/2020/04/12/linux-kernel-interrupt/"/>
    <id>https://razertory.me/2020/04/12/linux-kernel-interrupt/</id>
    <published>2020-04-12T05:50:04.000Z</published>
    <updated>2020-04-19T14:25:52.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中断信号"><a href="#中断信号" class="headerlink" title="中断信号"></a>中断信号</h3><p>中断机制，简单说就是键盘、鼠标、磁盘之类的硬件，在需要的时候向内核发信号的一种机制。比如我此刻正在用键盘打字，其实就是在发出电信号给一个名叫「中断控制器」的物理芯片中，再通过一个和处理器直连的管线给处理器。处理器接收到之后，监测到了是中断信号，就会中断当前的工作处理该信号进而告诉操作系统，让操作系统处理这个信号。不同的中断信号，有的着唯一的 IRQ 编号。比如时钟 IRQ 0，键盘 IRQ 1，有的是动态分配的，比如在 PCI 总线上的设备。</p><h3 id="中断处理"><a href="#中断处理" class="headerlink" title="中断处理"></a>中断处理</h3><p>操作系统处理中断的过程一般分成两个部分，命名为「上半部（top half）」和「下半部（bottom half）」。一般上半部(中断处理程序)有严格时限的操作，比方说快速应答。而有的可以延后执行的操作就交给了下半部。举个例子，操作系统处理网卡数据包的时候，会在上半部把网络数据拷贝到内存，下半部做数据处理的操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/a67b702fly1gdzeyef51dj217m0kmq9a.jpg" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><h3 id="下半部"><a href="#下半部" class="headerlink" title="下半部"></a>下半部</h3><p><strong>时间敏感</strong>，<strong>硬件相关</strong>或者<strong>保证不能中断</strong>的任务，通常一定是在上半部，否则都在下半部。下半部的实现机制，在 linux 内核发展中经历了几个版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/a67b702fly1gdzfdr63ytj212s0ak428.jpg" alt="tasklet 基于软中断实现" title>                </div>                <div class="image-caption">tasklet 基于软中断实现</div>            </figure><p>软中断是编译期间分配的，由 softirq_action 表示。定义在 <a href="https://github.com/torvalds/linux/blob/master/include/linux/interrupt.h" target="_blank" rel="noopener">linux/interrupt.h</a>。</p><p><a href="https://github.com/torvalds/linux/blob/master/kernel/softirq.c" target="_blank" rel="noopener">kernel/softirq.c</a> 里面定义了一个包含 32 个结构体的数组。每个结构体表示一个软中断，因此软中断最多有 32 个。不过目前这用到了 9 个。当软中断开始工作的时候，会执行一个名叫 <code>void softirq_handler(struct softirq_action *)</code> 的函数去标记注已经册的软中断。</p><p>等到合适的时候，该软中断就会执行，比如</p><ul><li>从硬件中断代码返回的时候  </li><li>在 ksoftirqd 内核线程中</li><li>在一些显式执行、显式检查软中断的程序中，比如网络系统中</li></ul><p>tasklet 源自软中断，提供了动态分配的特性，有着更广泛的应用场景。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;中断信号&quot;&gt;&lt;a href=&quot;#中断信号&quot; class=&quot;headerlink&quot; title=&quot;中断信号&quot;&gt;&lt;/a&gt;中断信号&lt;/h3&gt;&lt;p&gt;中断机制，简单说就是键盘、鼠标、磁盘之类的硬件，在需要的时候向内核发信号的一种机制。比如我此刻正在用键盘打字，其实就是在发出
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://razertory.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 内核」系统调用</title>
    <link href="https://razertory.me/2020/04/12/linux-kernel-system-call/"/>
    <id>https://razertory.me/2020/04/12/linux-kernel-system-call/</id>
    <published>2020-04-12T05:50:04.000Z</published>
    <updated>2020-04-18T08:54:30.936Z</updated>
    
    <content type="html"><![CDATA[<p>内核内存空间在操作系统中是受保护的。通常情况下，一个普通程序执行在用户空间。当需要与内核通信的时候，比如写文件到磁盘，就需要进行<strong>系统调用</strong>。</p><p>有趣的是，内核原生提供的系统调用很少(参考<a href="http://asm.sourceforge.net/syscall.html" target="_blank" rel="noopener">List of Linux/i386 system calls</a>)。当我们需要系统调用的时候，实际上是在调用调用的上一层 API。这一层 API 封装了各种系统调用（通常就是操作系统内置的 C 库）。现阶段，这一层 API 的标准来自于 IEEE ，名为 POSIX（Portable Operating System Interface）。这么做的原因是 unix 倡导的 <em>提供机制，而不是提供策略</em>。意思是提供有限的，但可以很好组合的工具、方法，在此基础上实现各种功能。</p><p>例如，</p><p><code>get_pid()</code> 在内核中的被定义为 <code>sys_getpid()</code><br><code>bar()</code> 在内核中被定义为 <code>sys_bar()</code></p><p>一个用户空间的程序，要做系统调用，具体的过程为</p><ul><li>陷入内核</li><li>传递系统调用编号和参数</li><li>执行系统调用</li><li>将系统调用的返回值带给用户空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内核内存空间在操作系统中是受保护的。通常情况下，一个普通程序执行在用户空间。当需要与内核通信的时候，比如写文件到磁盘，就需要进行&lt;strong&gt;系统调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有趣的是，内核原生提供的系统调用很少(参考&lt;a href=&quot;http://asm.so
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://razertory.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>「Linux 内核」进程管理</title>
    <link href="https://razertory.me/2020/04/11/linux-kernel-process/"/>
    <id>https://razertory.me/2020/04/11/linux-kernel-process/</id>
    <published>2020-04-11T10:15:42.000Z</published>
    <updated>2020-04-11T11:54:05.665Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p>进程是处于执行期的程序以及相关资源的总称。比如打开的文件、挂起的信号、内核内部数据等等。在 linux 源码中，一个进程的相关信息维护在 task_struct <a href="https://github.com/torvalds/linux/blob/master/include/linux/sched.h#L632" target="_blank" rel="noopener">task_struct</a>的结构体中。这里面包含了进程的状态(pid，运行状态)、相关资源、以及相关进程（子进程、父进程）信息。内核会维护一个双向链表，每个链表的节点指向对应的 task_struct。</p><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul><li>TASK_RUNNING: 可执行的；等待执行的</li><li>TASK_INTERRUPTIBLE: 可中断的; 比如被阻塞、或者在 sleep</li><li>TASK_UNINTERRUPTIBLE: 不可中断的; 对外界的信号不做出响应</li><li>EXIT_ZOMBIE: 主动退出；还没有完全释放资源</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/a67b702fgy1gdq0dnlo0cg20fw09b0sw.gif" alt="进程状态图" title>                </div>                <div class="image-caption">进程状态图</div>            </figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>在进程被 fork 出来之后 task_struct 会有自己的 pid 和父进程的 pid。但一些必要的系统资源并不会拷贝过来，而是当需要写入的时候再做(copy-on-write)。进程调用 exit() 结束, 部分资源会释放，同时调用 exit_notify() 向父进程发信号。若父进程及时响应，此时释放所有的资源；否则认为此时的这个进程是僵尸进程。同理，如果父进程先于子进程退出，子进程就会成为孤儿进程。内核会将这类进程归给 pid 为 1 的进程。</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>线程是一种特殊的进程（强调只是 linux）同一个进程的 N 个线程只是 N 个共享同一块资源的<br>task_struct。比如进程创建的时候会依赖 clone 方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clone(SIGCHLD, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>而线程的创建就是传递来一些参数来指明被共享的资源，这个设计现在看起来也是非常优雅的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clone(CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h4&gt;&lt;p&gt;进程是处于执行期的程序以及相关资源的总称。比如打开的文件、挂起的信号、内核内部数据等等。在 linux 源码中，一个进程的相关信息维护在 t
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://razertory.me/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Scala 函数式编程设计</title>
    <link href="https://razertory.me/2020/02/20/functional-program-design-in-scala/"/>
    <id>https://razertory.me/2020/02/20/functional-program-design-in-scala/</id>
    <published>2020-02-20T15:53:05.000Z</published>
    <updated>2020-03-28T13:02:10.018Z</updated>
    
    <content type="html"><![CDATA[<p>在这个 2020 年初的特殊时期。</p><p>Scala 是一门现代化，多范式的 JVM 语言。</p><p>传送门（可能需要🚀)</p><ul><li><a href="https://www.coursera.org/learn/progfun2" target="_blank" rel="noopener">Functional Program Design in Scala on Coursera</a></li><li><a href="https://www.coursera.org/account/accomplishments/certificate/BP5FRUVSFPN8" target="_blank" rel="noopener">没什么用的 certificate</a></li></ul><hr><h2 id="W1"><a href="#W1" class="headerlink" title="W1"></a>W1</h2><h3 id="case-class-和模式匹配"><a href="#case-class-和模式匹配" class="headerlink" title="case class 和模式匹配"></a>case class 和模式匹配</h3><p>用 Scala 来表示 JSON 对象可以这样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">JSeq</span> (<span class="params">elems: <span class="type">List</span>[<span class="type">JSON</span>]</span>) <span class="keyword">extends</span> <span class="title">JSON</span>  <span class="title">//</span> <span class="title">JSON</span> <span class="title">的数组</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">JObj</span> (<span class="params">bindings: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">JSON</span>]</span>) <span class="keyword">extends</span> <span class="title">JSON</span> <span class="title">//</span> <span class="title">JSON</span> <span class="title">对象</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">JNum</span> (<span class="params">num: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span> <span class="title">//</span> <span class="title">数字类型</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">JStr</span> (<span class="params">str: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">JBool</span>(<span class="params">b: <span class="type">Boolean</span></span>) <span class="keyword">extends</span> <span class="title">JSON</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">JNull</span> <span class="keyword">extends</span> <span class="title">JSON</span> <span class="title">//</span> <span class="title">空</span></span></span><br></pre></td></tr></table></figure><p>所以，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"firstName"</span> : <span class="string">"John"</span>,</span><br><span class="line">    <span class="attr">"lastName"</span> : <span class="string">"Smith"</span>,</span><br><span class="line">    <span class="attr">"address"</span> : &#123;</span><br><span class="line">        <span class="attr">"streetAddress"</span> : <span class="string">"21 2 nd Street"</span>,</span><br><span class="line">        <span class="attr">"state"</span> : <span class="string">"NY"</span>,</span><br><span class="line">        <span class="attr">"postalCode"</span>: <span class="number">10021</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"phoneNumbers"</span>: [</span><br><span class="line">        &#123;<span class="attr">"type"</span> : <span class="string">"home"</span>,<span class="attr">"number "</span>: <span class="string">"212 555 -1234"</span>&#125; ,</span><br><span class="line">        &#123;<span class="attr">"type"</span> : <span class="string">"fax"</span>,<span class="attr">"number "</span>: <span class="string">"646 555 -4567"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以表示为</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> data = <span class="type">JObj</span>(<span class="type">Map</span>(</span><br><span class="line">    <span class="string">"firstName"</span> -&gt; <span class="type">JStr</span>(<span class="string">"John"</span>),</span><br><span class="line">    <span class="string">"lastName"</span> -&gt; <span class="type">JStr</span>(<span class="string">"Smith"</span>),</span><br><span class="line">    <span class="string">"address"</span> -&gt; <span class="type">JObj</span>(<span class="type">Map</span>(</span><br><span class="line">    <span class="string">"streetAddress"</span> -&gt; <span class="type">JStr</span>(<span class="string">"21 2nd Street"</span>),</span><br><span class="line">    <span class="string">"state"</span> -&gt; <span class="type">JStr</span>(<span class="string">"NY"</span>),</span><br><span class="line">    <span class="string">"postalCode"</span> -&gt; <span class="type">JNum</span>(<span class="number">10021</span>)</span><br><span class="line">)),</span><br><span class="line"><span class="string">"phoneNumbers"</span> -&gt; <span class="type">JSeq</span>(<span class="type">List</span>(</span><br><span class="line">    <span class="type">JObj</span>(<span class="type">Map</span>(</span><br><span class="line">    <span class="string">"type"</span> -&gt; <span class="type">JStr</span>(<span class="string">"home"</span>), <span class="string">"number"</span> -&gt; <span class="type">JStr</span>(<span class="string">"212 555-1234"</span>)</span><br><span class="line">)),</span><br><span class="line"><span class="type">JObj</span>(<span class="type">Map</span>(</span><br><span class="line">    <span class="string">"type"</span> -&gt; <span class="type">JStr</span>(<span class="string">"fax"</span>), <span class="string">"number"</span> -&gt; <span class="type">JStr</span>(<span class="string">"646 555-4567"</span>)</span><br><span class="line">)) )) ))</span><br></pre></td></tr></table></figure><p>比如说我要实现一个打印 JSON 对象的方法，就可以</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span>(json: <span class="type">JSON</span>): <span class="type">String</span> = json <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">JSeq</span>(elems) =&gt;</span><br><span class="line">    <span class="string">"["</span> + (elems map show mkString <span class="string">", "</span>) + <span class="string">"]"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">JObj</span>(bindings) =&gt;</span><br><span class="line">    <span class="keyword">val</span> assocs = bindings map &#123;</span><br><span class="line">        <span class="keyword">case</span> (key, value) =&gt; <span class="string">"\""</span> + key + <span class="string">"\": "</span> + show(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"&#123;"</span> + (assocs mkString <span class="string">", "</span>) + <span class="string">"&#125;"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">JNum</span>(num) =&gt; num.toString</span><br><span class="line">    <span class="keyword">case</span> <span class="type">JStr</span>(str) =&gt; '\<span class="string">"' + str + '\"'</span></span><br><span class="line"><span class="string">    case JBool(b) =&gt; b.toString</span></span><br><span class="line"><span class="string">    case JNull =&gt; "</span><span class="string">null"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>上述的 show(data) 就输出</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res1: <span class="type">String</span> = &#123;<span class="string">"firstName"</span>: <span class="string">"John"</span>, <span class="string">"lastName"</span>: <span class="string">"Smith"</span>, <span class="string">"address"</span>: &#123;<span class="string">"streetAddress"</span>: <span class="string">"21 2nd Street"</span>, <span class="string">"state"</span>: <span class="string">"NY"</span>, <span class="string">"postalCode"</span>: <span class="number">10021.0</span>&#125;, <span class="string">"phoneNumbers"</span>: [&#123;<span class="string">"type"</span>: <span class="string">"home"</span>, <span class="string">"number"</span>: <span class="string">"212 555-1234"</span>&#125;, &#123;<span class="string">"type"</span>: <span class="string">"fax"</span>, <span class="string">"number"</span>: <span class="string">"646 555-4567"</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>第 6 行代码里面 map 传入的函数是，我们知道，在这里 map 函数的签名是 <code>def map[B](f: (A) =&gt; B): List[B]</code><br>那么第六行的 <code>f</code> 就是 <code>case (key, value) =&gt; &quot;\&quot;&quot; + key + &quot;\&quot;: &quot; + show(value)</code>。 这个函数如果单独拎出来，其实就是</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f: (<span class="type">String</span>, <span class="type">JSON</span>) =&gt; <span class="type">String</span> = &#123; <span class="keyword">case</span> (key, value) =&gt; key + ”: ” + value &#125; <span class="comment">// 注意看 JObj 定义</span></span><br></pre></td></tr></table></figure><p>所以用 case class 最方便的地方在于<strong>模式匹配中的 decompose</strong></p><h3 id="函数即对象"><a href="#函数即对象" class="headerlink" title="函数即对象"></a>函数即对象</h3><p>任何情况下，函数 <code>A =&gt; B</code> 其实就是</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala.<span class="type">Function1</span>[<span class="type">A</span>, <span class="type">B</span>]</span><br></pre></td></tr></table></figure><p>的简写。</p><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p>根据 Function1 的定义</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[-<span class="type">A</span>, +<span class="type">R</span>] </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">A</span>): <span class="type">R</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f1: <span class="type">Int</span> =&gt; <span class="type">Int</span> = (x: <span class="type">Int</span>) =&gt; x + <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> f2 = <span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x + <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>f1 和 f2 等价。</p><h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>对于偏函数 PartialFunction 定义为</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">PartialFunction</span>[-<span class="type">A</span>, +<span class="type">R</span>] <span class="keyword">extends</span> <span class="title">Function1</span>[-<span class="type">A</span>, +<span class="type">R</span>] </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">A</span>): <span class="type">R</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">A</span>): <span class="type">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f1: <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">String</span>] = &#123; <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="string">"pong"</span> &#125;</span><br><span class="line"><span class="keyword">val</span> f2 = <span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">String</span>, <span class="type">String</span>] &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">String</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="string">"pong"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">String</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f1 和 f2 等价。</p><p>ps: 以上，「等价」的意思是两个函数只要输入相同，输出一定相同。</p><h2 id="W2"><a href="#W2" class="headerlink" title="W2"></a>W2</h2><h3 id="LazyList"><a href="#LazyList" class="headerlink" title="LazyList"></a>LazyList</h3><p>下面代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">  println(x + <span class="string">" "</span>)</span><br><span class="line">  x % <span class="number">11</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> v1 = (<span class="number">1</span> to <span class="number">100000</span>).filter(f)(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> v2 = (<span class="number">1</span> to <span class="number">100000</span>).to(<span class="type">LazyList</span>).filter(f)(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>v1 和 v2 等价。计算 v1 的时候会打印 <code>1 2 3...9999 100000</code>, 而计算 v2 的时候打印 <code>1 2 3 ... 21 22</code>。这是因为对于 v2，<code>(1 to 100000).to(LazyList)</code> 产生的是 <code>scala.collection.immutable.LazyList</code>。其中官方文档对其有个简单的描述</p><blockquote><p>This class implements an immutable linked list that evaluates elements in order and only when needed</p></blockquote><p>也就是当 LazyList 里面的元素被需要的时候，才会进行有序计算，并且计算会终止知道所需的元素计算结束。这也就是为什么会有上述的输出了。</p><h3 id="惰性求值-Lazy-Evaluation"><a href="#惰性求值-Lazy-Evaluation" class="headerlink" title="惰性求值 Lazy Evaluation"></a>惰性求值 Lazy Evaluation</h3><p>在 Scala 里面，Lazy 意味着两点</p><ul><li><strong>尽量延后求值计算</strong></li><li><strong>只计算一次</strong></li></ul><p>例如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expr</span> </span>= &#123;</span><br><span class="line">  <span class="keyword">val</span> x = &#123; print(”x”); <span class="number">1</span> &#125;</span><br><span class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> y = &#123; print(”y”); <span class="number">2</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">z</span> </span>= &#123; print(”z”); <span class="number">3</span> &#125;</span><br><span class="line">  z + y + x + z + y + x <span class="comment">// last line</span></span><br><span class="line">&#125;</span><br><span class="line">expr</span><br></pre></td></tr></table></figure><p>这样的输出为 <code>xzyz</code></p><h3 id="Infinite-Sequences"><a href="#Infinite-Sequences" class="headerlink" title="Infinite Sequences"></a>Infinite Sequences</h3><p>利用 LazyList 的特性，可以构造出无限序列。比如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">from</span></span>(n: <span class="type">Int</span>): <span class="type">LazyList</span>[<span class="type">Int</span>] = n #:: from(n + <span class="number">1</span>) <span class="comment">// 无限序列</span></span><br><span class="line">from: (n: <span class="type">Int</span>)<span class="type">LazyList</span>[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> natures = from(<span class="number">0</span>) <span class="comment">// 自然数</span></span><br><span class="line">natures: <span class="type">LazyList</span>[<span class="type">Int</span>] = <span class="type">LazyList</span>(&lt;not computed&gt;)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> hundreds = natures.filter(_ % <span class="number">100</span> == <span class="number">0</span>)</span><br><span class="line">hundreds: scala.collection.immutable.<span class="type">LazyList</span>[<span class="type">Int</span>] = <span class="type">LazyList</span>(&lt;not computed&gt;)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> fourHundred = hundreds(<span class="number">4</span>) <span class="comment">// 计算</span></span><br><span class="line">fourHundred: <span class="type">Int</span> = <span class="number">400</span></span><br></pre></td></tr></table></figure><p><strong>埃拉托斯特尼筛法</strong></p><blockquote><p>埃拉托斯特尼筛法是列出所有小素数最有效的方法之一，其名字来自于古希腊数学家埃拉托斯特尼，并且被描述在另一位古希腊数学家尼科马库斯所著的《算术入门》中。-<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>用 LazyList 实现会非常简单，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from</span></span>(n: <span class="type">Int</span>): <span class="type">LazyList</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  n #:: from(n + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sieve</span></span>(s: <span class="type">LazyList</span>[<span class="type">Int</span>]): <span class="type">LazyList</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">  s.head #:: sieve(s.tail.filter(_ % s.head != <span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primeNumber</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    sieve(from(<span class="number">2</span>))(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> n = sieve(from(<span class="number">2</span>))(<span class="number">100</span>) <span class="comment">// 输出 547</span></span><br></pre></td></tr></table></figure><h3 id="题目：倒水问题"><a href="#题目：倒水问题" class="headerlink" title="题目：倒水问题"></a>题目：倒水问题</h3><p>给几个知道容量，但是没有刻度的杯子，有个可以取之不尽的水源用来给杯子装满水和将杯子的水全部倒出。我们需要做的就是盛出给定容量的水。我们能做的操作有三个</p><ul><li>empty 清空</li><li>fill 放满水</li><li>pour(a, b) 把 a 的水全部往 b 倒直至 b 杯满了或者 a 杯没水了</li></ul><p>现在需要找到取得容量为 N 的水时，需要的操作。</p><p>附：1. <a href="https://github.com/razertory/scala-code-lab/blob/master/src/main/scala/scalaschool/WaterPouring.scala" target="_blank" rel="noopener">Scala 完整代码</a> 2. <a href="https://www.youtube.com/watch?v=q6M_pco_5Vo" target="_blank" rel="noopener">python 解法</a></p><h2 id="W3"><a href="#W3" class="headerlink" title="W3"></a>W3</h2><blockquote><p>下面会用 Scala 进行加法器模拟。对于计算机中，两个数如何相加，可以提前阅读 <a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E6%B3%95%E5%99%A8" target="_blank" rel="noopener">维基百科-加法器</a>，最好能够做一下 <a href="/2019/11/11/add-by-bit/">位运算实现加法</a>。</p></blockquote><p>通过以上内容，我们需要知道的最重要的点在于：两个一位二进制数相加，将会产生两个输出，其中一个是当前位相加的值 S，另一个是相加后的进位信息 C。其中 S 可以用<em>异或门</em>，进位可以用<em>与门</em>。两个半加器用<em>或</em>门组合为一个全加器。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/a67b702fgy1gc6mm6fcccj21fo0rgh3a.jpg" alt="异或的操作通过三种门的组合实现" title>                </div>                <div class="image-caption">异或的操作通过三种门的组合实现</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/a67b702fgy1gc6mmvhps1j20tq0ja10b.jpg" alt="两个用与门组合的半加器构成一个全加器" title>                </div>                <div class="image-caption">两个用与门组合的半加器构成一个全加器</div>            </figure><p>根据上图，我们至少需要实现的是</p><ul><li><p>电线：用来传导信号，信号可以用 boolean 类型表示 0 和 1</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wire</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> sigVal = <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getSignal</span></span>: <span class="type">Boolean</span> = sigVal</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setSignal</span></span>(s: <span class="type">Boolean</span>): <span class="type">Unit</span> =</span><br><span class="line">    <span class="keyword">if</span> (s != sigVal) &#123;</span><br><span class="line">        sigVal = s</span><br><span class="line">        actions foreach(_())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>与门：输入两个电信号，输出 &amp; 对应的信号</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">andGate</span></span>(in1: <span class="type">Wire</span>, in2: <span class="type">Wire</span>, output: <span class="type">Wire</span>): <span class="type">Unit</span> = ???</span><br></pre></td></tr></table></figure><ul><li>或门：输入两个电信号，输出 | 对应的信号</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orGate</span></span>(in1: <span class="type">Wire</span>, in2: <span class="type">Wire</span>, output: <span class="type">Wire</span>): <span class="type">Unit</span> = ???</span><br></pre></td></tr></table></figure><ul><li>逆变器：输入电信号，输出 ! 对应的信号</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverter</span></span>(in: <span class="type">Wire</span>, output: <span class="type">Wire</span>): <span class="type">Unit</span> = ???</span><br></pre></td></tr></table></figure><p>在此基础上，实现出半加器和全加器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">halfAdder</span></span>(a: <span class="type">Wire</span>, b: <span class="type">Wire</span>, s: <span class="type">Wire</span>, c: <span class="type">Wire</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> d = <span class="keyword">new</span> <span class="type">Wire</span></span><br><span class="line">  <span class="keyword">val</span> e = <span class="keyword">new</span> <span class="type">Wire</span></span><br><span class="line">  orGate(a, b, d)</span><br><span class="line">  andGate(a, b, c)</span><br><span class="line">  inverter(c, e)</span><br><span class="line">  andGate(d, e, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullAdder</span></span>(a: <span class="type">Wire</span>, b: <span class="type">Wire</span>, cin: <span class="type">Wire</span>, sum: <span class="type">Wire</span>, cout: <span class="type">Wire</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> s = <span class="keyword">new</span> <span class="type">Wire</span></span><br><span class="line">  <span class="keyword">val</span> c1 = <span class="keyword">new</span> <span class="type">Wire</span></span><br><span class="line">  <span class="keyword">val</span> c2 = <span class="keyword">new</span> <span class="type">Wire</span></span><br><span class="line">  halfAdder(b, cin, s, c1)</span><br><span class="line">  halfAdder(a, s, sum, c2)</span><br><span class="line">  orGate(c1, c2, cout)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了全加器后。加入模拟信号的输入输出即可，完整代码 <a href="https://github.com/razertory/scala-code-lab/blob/master/src/main/scala/scalaschool/DigitalCircuitSimulator.scala" target="_blank" rel="noopener">模拟加法器</a></p><h2 id="W4"><a href="#W4" class="headerlink" title="W4"></a>W4</h2><h3 id="Functional-Reactive-Programming-FRP"><a href="#Functional-Reactive-Programming-FRP" class="headerlink" title="Functional Reactive Programming (FRP)"></a>Functional Reactive Programming (FRP)</h3><p>在 MVC 模型中，FRP 可以让 model 在产生变化的同时 view 自动变化。这样的模型一般也就是 pub-sub 模型或者叫观察者模型 (observers)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Subscriber1   subscribe     ___________</span><br><span class="line">Subscriber2  ------------&gt; |          |</span><br><span class="line">Subscriber3                |Publisher |</span><br><span class="line">Subscriber4  &lt;------------ |          |</span><br><span class="line">Subscriber5    publish     |__________|</span><br></pre></td></tr></table></figure><p>通用的说比如 <code>a = f(b)</code> 里面。当 b 在发生变化的时候 a 也会跟着变。实现这一点，<br>可以把「变化」归化为「event」，而自动检查这些「event」的东西叫做 Signal。在 Scala 里面通常把这样的 Signal 实现为一个类型，通过 apply() 给其赋值。比如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="type">Signal</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> v = s() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>同时，为了给 Signal 再次赋值，可以扩展新增一个 update 方法。比如 <code>s.update(5)</code>，顺带可以写成 <code>s() = 5</code>。这样的话，实现一个扩展了 Signal 名为 <code>Var</code> 的类型，让其拥有 <code>update</code> 方法。</p><p>在这样的条件下，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">val</span> num = <span class="type">Var</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> twice = <span class="type">Signal</span>(num() * <span class="number">2</span>)</span><br><span class="line">num() = <span class="number">2</span></span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="type">Var</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> twice = <span class="type">Signal</span>(num() * <span class="number">2</span>)</span><br><span class="line">num = <span class="type">Var</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>(1) 里面的 twice 变为 4，（2）里面的 twice 还是 2。上述体现的 FRP 里面，num 是 <em>publisher</em>，twice 是 <em>subscriber</em>。num 产生了 event，twice 接受这样的 event。并且所有的变量本身都是 <em>immutable</em>。</p><h3 id="实现-FRP"><a href="#实现-FRP" class="headerlink" title="实现 FRP"></a>实现 FRP</h3><h4 id="Var-和-Signal"><a href="#Var-和-Signal" class="headerlink" title="Var 和 Signal"></a>Var 和 Signal</h4><p>我们知道 Signal 和 Var 应该是这样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// signal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span>[<span class="type">T</span>](<span class="params">expr: =&gt; <span class="type">T</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">T</span> = ???</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Signal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">T</span>](expr: =&gt; <span class="type">T</span>) = <span class="keyword">new</span> <span class="type">Signal</span>(expr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Var</span>[<span class="type">T</span>](<span class="params">expr: =&gt; <span class="type">T</span></span>) <span class="keyword">extends</span> <span class="title">Signal</span>[<span class="type">T</span>](<span class="params">expr</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(expr: =&gt; <span class="type">T</span>): <span class="type">Unit</span> = ???</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Var</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">T</span>](expr: =&gt; <span class="type">T</span>) = <span class="keyword">new</span> <span class="type">Var</span>(expr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="维护订阅关系"><a href="#维护订阅关系" class="headerlink" title="维护订阅关系"></a>维护订阅关系</h3><p>有了这些方法，就可以做到赋值和再次赋值。还需要的是，当一个 publisher 产生了 event 的时候，如何自动通知到对应的 subscriber，并且让其重新计算（re-evaluate）。</p><p>例如，s 是 Var 类型，并且进入到了表达式 expr 里，形如 <code>expr s</code>，那么当表达式 <code>expr s</code>，作为参数传递给了某个 Signal 形如 <code>val t = Signal(expr s)</code> 的时候。就需要给 s 维护一个 subscriber。同理，当有多个 subscribers 的时候就给 s 维护一个 subscriber 的集合。比如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// val set = Set()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="type">Var</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发的条件就是 class Var 的 apply 方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发：set += Signal(num() * 2)</span></span><br><span class="line"><span class="keyword">val</span> double = <span class="type">Signal</span>(num() * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发：set += Signal(num() * 3)</span></span><br><span class="line"><span class="keyword">val</span> tiple = <span class="type">Signal</span>(num() * <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>触发的条件达到了，可是如何把 <code>Signal(num() * 3)</code> 这样的对象传递给 num 的 set ？</p><p>这个时候就需要在 Object Signal 里面新增一块用于维护方法调用的数据结构，没做就是 stack</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Signal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> caller = <span class="keyword">new</span> <span class="type">StackableVariable</span>[<span class="type">Signal</span>[_]](<span class="type">NoSignal</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">T</span>](expr: =&gt; <span class="type">T</span>) = <span class="keyword">new</span> <span class="type">Signal</span>(expr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StackableVariable 在当前的上下文中多个 Signal/Object 会共享。当调用 class Signal 的 apply() 方法的时候就去这里面找到当前的调用方。</p><h3 id="维护调用栈"><a href="#维护调用栈" class="headerlink" title="维护调用栈"></a>维护调用栈</h3><p>调用栈里面存放有序的 Signal。例如，有下面测试代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">"multi subscribers"</span>) &#123;</span><br><span class="line">  <span class="keyword">val</span> publisher = <span class="type">Var</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">val</span> subscriber1 = <span class="type">Signal</span>(publisher() * <span class="number">20</span>) <span class="comment">// 注意 scala 的 call-by-name 和 call-by-value。这里传递的是表达式</span></span><br><span class="line">  <span class="keyword">val</span> subscriber2 = <span class="type">Signal</span>(publisher() * <span class="number">30</span>)</span><br><span class="line">  <span class="keyword">val</span> subscriber3 = <span class="type">Signal</span>(publisher() * <span class="number">40</span>)</span><br><span class="line">  assert(subscriber1() == <span class="number">20</span>)</span><br><span class="line">  assert(subscriber2() == <span class="number">30</span>)</span><br><span class="line">  assert(subscriber3() == <span class="number">40</span>)</span><br><span class="line">  publisher() = <span class="number">2</span></span><br><span class="line">  assert(subscriber1() == <span class="number">40</span>)</span><br><span class="line">  assert(subscriber2() == <span class="number">60</span>)</span><br><span class="line">  assert(subscriber3() == <span class="number">80</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三行开始，包含表达式的 Signal 进入调用栈，并不断被带入 subscriber 的集合。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackableVariable</span>[<span class="type">T</span>](<span class="params">init: <span class="type">T</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> values: <span class="type">List</span>[<span class="type">T</span>] = <span class="type">List</span>(init)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: <span class="type">T</span> = values.head</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">withValue</span></span>[<span class="type">R</span>](newValue: <span class="type">T</span>)(op: =&gt; <span class="type">R</span>): <span class="type">R</span> = &#123;</span><br><span class="line">    values = newValue :: values</span><br><span class="line">    <span class="keyword">try</span> op <span class="keyword">finally</span> values = values.tail</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/razertory/scala-code-lab/blob/master/src/main/scala/scalaschool/SubPub.scala" target="_blank" rel="noopener">完整代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这个 2020 年初的特殊时期。&lt;/p&gt;
&lt;p&gt;Scala 是一门现代化，多范式的 JVM 语言。&lt;/p&gt;
&lt;p&gt;传送门（可能需要🚀)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/progfun2&quot; targ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LRU 缓存</title>
    <link href="https://razertory.me/2020/02/16/lru-cache/"/>
    <id>https://razertory.me/2020/02/16/lru-cache/</id>
    <published>2020-02-16T09:39:04.000Z</published>
    <updated>2020-03-28T13:02:10.018Z</updated>
    
    <content type="html"><![CDATA[<p>LRU 的全称是 Least recently used，是缓存替换策略的一种。电脑存储器空间的大小固定，无法容纳服务器上所有的文件，所以当有新的文件要被置换入缓存时，必须根据一定的原则来取代掉适当的文件。此原则即所谓缓存替换策略。<br><a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">传送门</a></p><hr><p>实现 LRU 缓存需要用到 kv 类型和线型的数据结构，用来做到 O(1) 的查找效率和实现淘汰机制。我们可以用 HashMap 和一个双向链表。其中用双向链表的好处是：当要删除的节点为 node 的时候，通过 <code>node.pre</code> 和 <code>node.next</code> 可以快速找到前后节点，从而在链表中去掉这个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    LinkNode prev;</span><br><span class="line">    LinkNode next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新增的 node 只作为 head</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(LinkNode node)</span> </span>&#123;</span><br><span class="line">    node.prev = head;</span><br><span class="line">    node.next = head.next;</span><br><span class="line"></span><br><span class="line">    head.next.prev = node;</span><br><span class="line">    head.next = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 prev 和 next 快速删除节点</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(LinkNode node)</span></span>&#123;</span><br><span class="line">    LinkNode prev = node.prev;</span><br><span class="line">    LinkNode next = node.next;</span><br><span class="line"></span><br><span class="line">    prev.next = next;</span><br><span class="line">    next.prev = prev;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先删除，后新增从而指向头部</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(LinkNode node)</span></span>&#123;</span><br><span class="line">    removeNode(node);</span><br><span class="line">    addNode(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 淘汰末尾</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> LinkNode <span class="title">popTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkNode res = tail.prev;</span><br><span class="line">    removeNode(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Integer, LinkNode&gt; cache =</span><br><span class="line">          <span class="keyword">new</span> HashMap&lt;Integer, LinkNode&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">  <span class="keyword">private</span> LinkNode head, tail;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">    head = <span class="keyword">new</span> LinkNode();</span><br><span class="line">    tail = <span class="keyword">new</span> LinkNode();</span><br><span class="line"></span><br><span class="line">    head.next = tail;</span><br><span class="line">    tail.prev = head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    LinkNode node = cache.get(key);</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    moveToHead(node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    LinkNode node = cache.get(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line">      LinkNode newNode = <span class="keyword">new</span> LinkNode();</span><br><span class="line">      newNode.key = key;</span><br><span class="line">      newNode.value = value;</span><br><span class="line"></span><br><span class="line">      cache.put(key, newNode);</span><br><span class="line">      addNode(newNode);</span><br><span class="line"></span><br><span class="line">      ++size;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(size &gt; capacity) &#123;</span><br><span class="line">        LinkNode tail = popTail();</span><br><span class="line">        cache.remove(tail.key);</span><br><span class="line">        --size;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      node.value = value;</span><br><span class="line">      moveToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一种更为优雅的实现是让这个双向链表成环状，初始化为 value 都为 -1，大小为 capacity。每当有 get 和 put 操作的时候就调整环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key, val;</span><br><span class="line">        Node next, pre;</span><br><span class="line">        Node(<span class="keyword">int</span> key, <span class="keyword">int</span> val, Node pre, Node next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.pre = pre;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move2Head</span><span class="params">(Node cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == head) &#123;</span><br><span class="line">            head = head.pre;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.pre.next = cur.next;</span><br><span class="line">        cur.next.pre = cur.pre;</span><br><span class="line"></span><br><span class="line">        cur.next = head.next;</span><br><span class="line">        cur.next.pre = cur;</span><br><span class="line">        head.next = cur;</span><br><span class="line">        cur.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity)&#123;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> Node(-<span class="number">1</span>, -<span class="number">1</span>, cur, <span class="keyword">null</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = head;</span><br><span class="line">        head.pre = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        Node node = map.get(key);</span><br><span class="line">        move2Head(node);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            node.val = val;</span><br><span class="line">            move2Head(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != -<span class="number">1</span>) map.remove(head.key);</span><br><span class="line">            head.key = key;</span><br><span class="line">            head.val = val;</span><br><span class="line">            map.put(key, head);</span><br><span class="line">            head = head.pre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，Java 中的 LinkedHashMap 可以直接实现 LRU 缓存。:)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LRU 的全称是 Least recently used，是缓存替换策略的一种。电脑存储器空间的大小固定，无法容纳服务器上所有的文件，所以当有新的文件要被置换入缓存时，必须根据一定的原则来取代掉适当的文件。此原则即所谓缓存替换策略。&lt;br&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编辑距离</title>
    <link href="https://razertory.me/2020/01/11/edit-distance/"/>
    <id>https://razertory.me/2020/01/11/edit-distance/</id>
    <published>2020-01-11T03:35:32.000Z</published>
    <updated>2020-03-28T13:02:10.016Z</updated>
    
    <content type="html"><![CDATA[<p>给出两个单词 word1 和 word2，找出把 word1 编辑成 word2 的最短编辑距离。给出的可用编辑操作有：</p><ol><li>插入一个字符 insert</li><li>删除一个字符 delete</li><li>更新一个字符 update</li></ol><blockquote><p>编辑距离是针对二个字符串（例如英文字）的差异程度的量化量测，量测方式是看至少需要多少次的处理才能将一个字符串变成另一个字符串。编辑距离可以用在自然语言处理中，例如拼写检查可以根据一个拼错的字和其他正确的字的编辑距离，判断哪一个（或哪几个）是比较可能的字。DNA也可以视为用A、C、G和T组成的字符串，因此编辑距离也用在生物信息学中，判断二个DNA的类似程度。Unix 下的 diff 及 patch 即是利用编辑距离来进行文本编辑对比的例子。</p></blockquote><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="noopener">传送门</a></h2><p>对于 “a”, “”, 执行步骤 1<br>对于 “”, “a”, 执行步骤 2<br>对于 “a”, “b”, 执行步骤 3</p><p>假设字符串串 word1 和 word2 的最小编辑距离是 <code>d[i][j]</code> (i 和 j 代表 word1 和 word2 的长度 - 1)，当我们给 word1 和 word2 都 append 一个相同的字符的时候，这个编辑距离不变。因此可以认为，此时的 <code>d[i+1][j+1] == d[i][j]</code>。当 append 的字符不同的的时候。就是找到之前的最小编辑距离 + 1，这个之前的最小编辑距离可能是 <code>d[i][j]</code>、<code>d[i][j+1]</code>、或者 <code>d[i+1][j]</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/a67b702fgy1gasiec3bhgj204q0710sl.jpg" alt="Edit-Distance.png" title>                </div>                <div class="image-caption">Edit-Distance.png</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word1 == <span class="keyword">null</span> || word2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = word1.length() + <span class="number">1</span>, n = word2.length() + <span class="number">1</span>; <span class="comment">//多的一行留给空字符串</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] d = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            d[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            d[<span class="number">0</span>][j] = j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i-<span class="number">1</span>) == word2.charAt(j-<span class="number">1</span>))</span><br><span class="line">                    d[i][j] = d[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    d[i][j] = min(d[i-<span class="number">1</span>][j-<span class="number">1</span>], d[i][j-<span class="number">1</span>], d[i-<span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(a, Math.min(b, c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给出两个单词 word1 和 word2，找出把 word1 编辑成 word2 的最短编辑距离。给出的可用编辑操作有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入一个字符 insert&lt;/li&gt;
&lt;li&gt;删除一个字符 delete&lt;/li&gt;
&lt;li&gt;更新一个字符 update&lt;/li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二维数组中和最小路径</title>
    <link href="https://razertory.me/2020/01/11/minimum-path-sum/"/>
    <id>https://razertory.me/2020/01/11/minimum-path-sum/</id>
    <published>2020-01-11T02:38:44.000Z</published>
    <updated>2020-03-28T13:02:10.017Z</updated>
    
    <content type="html"><![CDATA[<p>在一个 m * n 大的非负组整数组成的二维数组中，找到一条从 left-top 到 right-bottom 的和最小的路径。输出这个路径的值。<a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="noopener">传送门</a></p><hr><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在这样一个矩阵中，从 <code>m[0][0]</code> 到 <code>m[2][2]</code> 的最短路径，可以看作是 <code>m[0][0]</code> 到 <code>m[1][2]</code> 的最短路径 (1-&gt;3-&gt;1-&gt;1) 以及 <code>m[2][1]</code> 的最短路径中取到的最小值 (1-&gt;1-&gt;4-&gt;2) 加上 <code>m[2][2]</code> 取到的最小值 1-&gt;3-&gt;1-&gt;1-&gt;1。因此可以得到关系式 </p><p><code>dp[m][n] = min(dp[m-1][n], dp[m][n-1]) + g[m][n]</code></p><p>利用这个关系式，处理好 m，n 为 0 的边界情况即可得出最短路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dp[m][n] = min(dp[m-1][n], dp[m][n-1]) + g[m][n] </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span> || g[<span class="number">0</span>] == <span class="keyword">null</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = g.length, w = g[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[h][w];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = g[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = dp[i][j-<span class="number">1</span>] + g[i][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j] + g[i][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + g[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[h-<span class="number">1</span>][w-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一个 m * n 大的非负组整数组成的二维数组中，找到一条从 left-top 到 right-bottom 的和最小的路径。输出这个路径的值。&lt;a href=&quot;https://leetcode.com/problems/minimum-path-sum/&quot; target
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="https://razertory.me/2020/01/11/longest-palindromic-substring/"/>
    <id>https://razertory.me/2020/01/11/longest-palindromic-substring/</id>
    <published>2020-01-11T02:00:36.000Z</published>
    <updated>2020-03-28T13:02:10.017Z</updated>
    
    <content type="html"><![CDATA[<p>给一个字符串 s，找到其中最长的回文串。<a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">传送门</a></p><hr><p>回文串有两种模式，一种是 aabb 类型，另一种是 aacbb 类型。当我们对一个字符串做是否是回文的时候可以实现一个 expand 函数用作判断<code>int expand(String s, int lelf, int right)</code> 当 s[left] == s[right] 且 left 和 right 没有到达字符串边界的时候计算长度即 <code>right - left + 1</code>。</p><p>实现了 expand 之后，对于任意字符串可以确认：</p><ol><li>字符串长度为 1 的时候，本身就是回文串</li><li>字符串长度为 2 的时候，判断两个字符是否相等，相等说明本身是，否则和 1 一致</li><li>字符串长度为 n 的时候，在对字符串进行从左到右扫描找到最大值 <code>max (expand(s, i, i), expand(s, i, i + 1))</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = expand(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = expand(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; max) &#123;</span><br><span class="line">                start = i - (len-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                max = len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + max);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expand</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right))&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给一个字符串 s，找到其中最长的回文串。&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>抢劫房子</title>
    <link href="https://razertory.me/2020/01/11/house-robber/"/>
    <id>https://razertory.me/2020/01/11/house-robber/</id>
    <published>2020-01-11T01:33:19.000Z</published>
    <updated>2020-03-28T13:02:10.017Z</updated>
    
    <content type="html"><![CDATA[<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p><a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">传送门</a></p><hr><p>假设房子定义为 <code>house[i]</code></p><p>房屋数量是 1 的时候，小偷只能偷这一家 <code>house[0]</code>。</p><p>房屋数量是 2 的时候，小偷从现有的选一个多的，也就是 <code>max(house[0], house[1])</code></p><p>房屋数量是 3 的时候，小偷的选择为 <code>max(house[0] + house[2], house[1])</code></p><p>如果我们知道房屋数量为 i - 1 的时候，小偷的最佳选择是 <code>d[i-1]</code>，那么当再增加一个房屋，即房屋数量为 i 的时候。依据题意可以推导出</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[i] = max(house[i] + d[i-<span class="number">2</span>], d[i-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>翻译成代码就是 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] d = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) d[i] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) d[i] = Math.max(nums[i], nums[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> d[i] = Math.max(d[i-<span class="number">2</span>] + nums[i], d[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。&lt;br&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>买卖股票的最大利润</title>
    <link href="https://razertory.me/2020/01/09/max-stock-profit/"/>
    <id>https://razertory.me/2020/01/09/max-stock-profit/</id>
    <published>2020-01-09T05:02:03.000Z</published>
    <updated>2020-03-28T13:02:10.016Z</updated>
    
    <content type="html"><![CDATA[<p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖 一次 该股票可能获得的利润是多少？</p><p>例如一只股票在某些时间节点的价格为 [9, 11, 8, 5, 7, 12, 16, 14]。</p><p>如果我们能在价格为 5 的时候买入并在价格为 16 时卖出，则能收获最大的利润 11。<br><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">传送门</a></p><hr><p>股票最大利润，其实就是个从头到尾一直更新最大利润。最大利润 = Math.max(前面的最大利润，当前股票价格 - 前面最低价格)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min = nums[<span class="number">0</span>], maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        min = Math.min(min, nums[i]);</span><br><span class="line">        maxProfit = Math.max(maxProfit, nums[i] - min);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖 一次 该股票可能获得的利润是多少？&lt;/p&gt;
&lt;p&gt;例如一只股票在某些时间节点的价格为 [9, 11, 8, 5, 7, 12, 16, 14]。&lt;/p&gt;
&lt;p&gt;如果我们能在价格为 5 的时候买入并在价格为 16 时卖
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020 新年快乐</title>
    <link href="https://razertory.me/2020/01/01/happy-new-year-2020/"/>
    <id>https://razertory.me/2020/01/01/happy-new-year-2020/</id>
    <published>2020-01-01T04:25:41.000Z</published>
    <updated>2020-03-28T13:02:10.016Z</updated>
    
    <content type="html"><![CDATA[<p>现在是 2020 年的一月一日，和普通放假的日常一样：1. KFC，2.电脑， 3.看书/编程。和之前不一样的是，咖啡点的是加冰的美式。回想起过去的一年，不在办公室的时候，我通常也会去找一个地方学习，常做的事情有</p><ul><li>刷课。MIT 6.824、SICP 那种</li><li>刷 OJ。通常是 Leetcode 或者 codewars，其中在 leetcode 上打了一段时间的周赛</li><li>看书。通常都是计算机相关的书籍，最近看的是 FP 相关</li><li>写博客。和现在一样</li></ul><p>这些事情都是我换个人喜欢做的，但是对外却有优先级。比如说如果我最近要参加面试，我可能会花更多的时间在刷 OJ；如果我最近要用一门新语言/框架，我可能会选择看书；如果我最近时间比较充裕且没有外部的需求，那么我会像现在一样写博客或者用一段连续且足够长的时间来刷课程。</p><p>这么做既满足了自己的喜好，也能够根据外部的状态及调整。</p><p>随着时间的推移，我越来越觉得自己即将成为那种很标准的「职场码农」。快速完成外部的需求，给团队带来价值，快速学习一门新技术，快速补偿技术债。但是我自己也不得不承认，因为这种策略，我到目前没有那种能做到 top 的事情。首先解释一下做到 top：比如说刷 OJ，我可以通过周赛或者自己的积分排名来判断，或者我可以去给某个知名开源的框架做贡献，通过 contributors 排名来看自己做的程度。做到 top 有时候不仅仅是因为自己多多少少有「追名逐利」的情结，更因为我坚持认为，如果喜欢做一件事情，肯定有把事情做好的意愿，那么只要不断坚持做自然就会做到 top。</p><p>前段时间的一个周末，我去了一家摊饼店，拍下了一行字</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/mw690/a67b702fgy1gagzjtfpp5j20u01407fd.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如果说，一个人可以一辈子专注于一件事情上，并且不会被别的事情所干扰或者诱惑应该是非常值得羡慕的。可是如果用资本家的眼光去看待这个，肯定会让人觉得这个人只知道打工(这里不把打工做贬义)。我记得在「泰囧」电影里面有个对白</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/mw690/a67b702fgy1gah030l1rhj20rs0doq4n.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/mw690/a67b702fgy1gah03e89o2j20rt0dt40p.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>资本家热爱「挣钱」本身这件事情，所以会用经营、扩张的眼光去看待做葱油饼。葱油饼小哥说秘方就是要自己亲自做，新鲜出炉，这是热爱做葱油饼人的眼光。不过这个世界就是需要这两种人。</p><p>如果把「做葱油饼」换成「写代码」，这个对白产生的效果应该是类似的。</p><p>我想说不论是为了更高的薪水不断学习，还是因为热爱编程本身不断学习，这两者应该是都被认可的。在现实世界中，我认为这两种动机应该是都存在的，或者说人本身就是这样的，既希望做的事情是自己喜欢的，也希望做的事情能给自己带来更多收入。</p><p>2020年，我们是野性和文明共存的。</p><p>新年快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在是 2020 年的一月一日，和普通放假的日常一样：1. KFC，2.电脑， 3.看书/编程。和之前不一样的是，咖啡点的是加冰的美式。回想起过去的一年，不在办公室的时候，我通常也会去找一个地方学习，常做的事情有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刷课。MIT 6.824、SICP
      
    
    </summary>
    
    
      <category term="思考" scheme="https://razertory.me/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>有序数组转化为平衡二叉搜索树（BST）</title>
    <link href="https://razertory.me/2019/12/12/sorted-arr-to-bst/"/>
    <id>https://razertory.me/2019/12/12/sorted-arr-to-bst/</id>
    <published>2019-12-12T13:41:57.000Z</published>
    <updated>2020-03-28T13:02:10.016Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个有序数组，数组元素升序排列，试将该数组转换为一棵平衡二叉搜索树（Balanced Binary Search Tree）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">convertToBST</span><span class="params">(ArrayList&lt;Integer&gt; arr)</span></span></span><br></pre></td></tr></table></figure><p>根据 BST 的定义 <em>二叉排序树的查找过程和次优二叉树类似，通常采取二叉链表作为二叉排序树的存储结构。中序遍历二叉排序树可得到一个关键字的有序序列，一个无序序列可以通过构造一棵二叉排序树变成一个有序序列，构造树的过程即为对无序序列进行排序的过程。每次插入的新的结点都是二叉排序树上新的叶子结点，在进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为非空即可。搜索,插入,删除的复杂度等于树高，O(log(n)).</em> 可以对其进行反中序的遍历。也就是 中-左-右 的一个逆向过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">convertToBST</span><span class="params">(ArrayList&lt;Integer&gt; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> convert(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TreeNode <span class="title">convert</span><span class="params">(ArrayList&lt;Integer&gt; arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(arr[mid]);</span><br><span class="line">    node.left = convert(arr, start, mid - <span class="number">1</span>);</span><br><span class="line">    node.right = convert(arr, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个有序数组，数组元素升序排列，试将该数组转换为一棵平衡二叉搜索树（Balanced Binary Search Tree）。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>完美的二分搜索</title>
    <link href="https://razertory.me/2019/11/28/binary-search/"/>
    <id>https://razertory.me/2019/11/28/binary-search/</id>
    <published>2019-11-28T14:45:06.000Z</published>
    <updated>2020-03-28T13:02:10.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>假设给一个有序的 int 类型的数组 arr，和一个目标值 target，找到这个目标值在数组中的下标。如果数组中没有<br>target 返回 -1。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>; <span class="comment">// 需要注意用 (start + end) / 2 在数学上没有问题。但是考虑到 start + end 可能会溢出。</span></span><br><span class="line">        <span class="keyword">if</span> (target == arr[mid]) </span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; arr[mid])</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            start + mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;假设给一个有序的 int 类型的数组 arr，和一个目标值 target，找到这个目标值在数组中的下标。如果数组中没有&lt;br&gt;target 返回 -1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>汉明距离</title>
    <link href="https://razertory.me/2019/11/17/hamming-distance/"/>
    <id>https://razertory.me/2019/11/17/hamming-distance/</id>
    <published>2019-11-17T02:46:03.000Z</published>
    <updated>2020-03-28T13:02:10.013Z</updated>
    
    <content type="html"><![CDATA[<p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。给出两个整数 x 和 y，计算它们之间的汉明距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br></pre></td></tr></table></figure><p>对于 x, 和 y 先进行异或，然后再计算结果中的 1 的个数即可。（其中 count 算法来自 <a href="/2019/11/14/count-of-one/">二进制中 1 的个数</a>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = x ^ y;</span><br><span class="line">    <span class="keyword">return</span> count(n); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。给出两个整数 x 和 y，计算它们之间的汉明距离。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>只出现一次的数</title>
    <link href="https://razertory.me/2019/11/17/single-number/"/>
    <id>https://razertory.me/2019/11/17/single-number/</id>
    <published>2019-11-17T02:31:09.000Z</published>
    <updated>2020-03-28T13:02:10.013Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span></span><br></pre></td></tr></table></figure><p>计算机科学中，异或满足四大定律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.恒定律：A ^ 0 = A</span><br><span class="line">2.归零率：A ^ A = 0</span><br><span class="line">3.交换律：A ^ B = B ^ A</span><br><span class="line">4.结合律：(A ^ B) ^ C = A ^ (B ^ C)</span><br></pre></td></tr></table></figure><p>假如给定的数组是 [1, 3, 1, 3, 2, 4, 4]。根据异或的定律，对数组从头到尾进行异或可以等价成分组之后的异或，这里可以理解成 [1, 1, 2, 3, 3, 4, 4]。相同的数都会变为 0 ，最后剩下的那个数也就和 0 进行异或等到自己本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        result ^= num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个数多于一半的数</title>
    <link href="https://razertory.me/2019/11/16/major-element/"/>
    <id>https://razertory.me/2019/11/16/major-element/</id>
    <published>2019-11-16T12:08:11.000Z</published>
    <updated>2020-03-28T13:02:10.013Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个大小为 n 的数组，找出其中在数组中出现次数大于 ⌊ n/2 ⌋ 的元素（众数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span></span><br></pre></td></tr></table></figure><p>理解这个问题，首先可以把数组分为两个部分：所有的众数和非众数。把众数和非众数进行两两抵消，那么最后一定还剩下众数。实际上这个也就是摩尔投票法。在遍历数组的时候不断确认当前的众数，如果没有，则认为下一个就是。维护一个计数器，在遇到相同的时候给众数 +1，不同的时候 -1。当计数器为 0 的时候认为没有众数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Integer candidate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            candidate = num;</span><br><span class="line">        &#125;</span><br><span class="line">        count += (num == candidate) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个大小为 n 的数组，找出其中在数组中出现次数大于 ⌊ n/2 ⌋ 的元素（众数）。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二进制中 1 的个数</title>
    <link href="https://razertory.me/2019/11/14/count-of-one/"/>
    <id>https://razertory.me/2019/11/14/count-of-one/</id>
    <published>2019-11-14T01:42:44.000Z</published>
    <updated>2020-03-28T13:02:10.013Z</updated>
    
    <content type="html"><![CDATA[<p>对于任意整数，求转换成二进制数之后，1 的个数。比如 5 转换成二进制是 101，其中 1 的个数是 2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span> <span class="params">(<span class="keyword">int</span> num)</span></span></span><br></pre></td></tr></table></figure><p>要判断一个二进制数的最低位是否是 1，只需要和 1 进行 <code>&amp;</code> 运算即可。那么具体的做法就一边移位一边统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span> <span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &amp; <span class="number">1</span> == <span class="number">1</span>) count++;</span><br><span class="line">        num &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于任意整数，求转换成二进制数之后，1 的个数。比如 5 转换成二进制是 101，其中 1 的个数是 2。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>位运算实现加法</title>
    <link href="https://razertory.me/2019/11/11/add-by-bit/"/>
    <id>https://razertory.me/2019/11/11/add-by-bit/</id>
    <published>2019-11-11T14:56:31.000Z</published>
    <updated>2020-03-28T13:02:10.013Z</updated>
    
    <content type="html"><![CDATA[<p>计算机科学中，基础运算运算都来自于二进制中的位运算。其中不免提到加法器，维基百科是这么定义的</p><blockquote><p>在电子学中，加法器（英语：adder）是一种用于执行加法运算的数字电路部件，是构成电子计算机核心微处理器中算术逻辑单元的基础。在这些电子系统中，加法器主要负责计算地址、索引等数据。除此之外，加法器也是其他一些硬件，例如二进制数的乘法器的重要组成部分。<br>尽管可以为不同计数系统设计专门的加法器，但是由于数字电路通常以二进制为基础，因此二进制加法器在实际应用中最为普遍。在数字电路中，二进制数的减法可以通过加一个负数来间接完成。为了使负数的计算能够直接用加法器来完成，计算中的负数可以使用二补数（补码）来表示，具体的细节可以参考数字电路相关的书籍</p></blockquote><p>对两个二进制数做相加，有以下规律</p><p><em>二进制加法</em></p><table><thead><tr><th>x</th><th>y</th><th>和</th><th>进位</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>假设 x + y 相加用代码表示，那么就需要一个 sum 和 carry 分别表示和与进位。不过这个还不足够表示两个数相加。</p><p>仔细观察可以发现 x + y 的 sum 和 carry 其实分别是异或<code>^</code>和与<code>&amp;</code>运算。如下：</p><p><em>异或</em></p><table><thead><tr><th>x</th><th>y</th><th>^</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p><em>与</em></p><table><thead><tr><th>x</th><th>y</th><th>&amp;</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二进制实现加法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">　　<span class="keyword">int</span> sum = a;</span><br><span class="line">　　<span class="keyword">int</span> carry = b;</span><br><span class="line">　　<span class="keyword">while</span>(carry != <span class="number">0</span> ) &#123;</span><br><span class="line">　　　　<span class="keyword">int</span> tmps = sum;</span><br><span class="line"> </span><br><span class="line">　　　　sum = tmps ^ carry;</span><br><span class="line">　　　　carry = (tmps &amp; carry) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机科学中，基础运算运算都来自于二进制中的位运算。其中不免提到加法器，维基百科是这么定义的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在电子学中，加法器（英语：adder）是一种用于执行加法运算的数字电路部件，是构成电子计算机核心微处理器中算术逻辑单元的基础。在这些电子系统
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>括号的合法序列</title>
    <link href="https://razertory.me/2019/11/10/valid-brackets/"/>
    <id>https://razertory.me/2019/11/10/valid-brackets/</id>
    <published>2019-11-10T01:55:10.000Z</published>
    <updated>2020-03-28T13:02:10.012Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个括号序列，里面包含小括号，中括号和大括号。你要判断这个括号序列是否有效。有效的括号序列要求，每个左括号都必须有一个同类的右括号与它正确配对。另外，空字符串认为是有效的括号序列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比如说，给你的序列是：</span><br><span class="line"></span><br><span class="line">()[]&#123;&#125;</span><br><span class="line"></span><br><span class="line">小括号/中括号/大括号的左右括号都能正确配对，因此这是一个有效的括号序列。</span><br><span class="line"></span><br><span class="line">再比如说给你的序列是：</span><br><span class="line"></span><br><span class="line">([)]</span><br><span class="line"></span><br><span class="line">这里面虽然正好有一对小括号和一对中括号，但它们的顺序不对，括号间无法正确配对，因此这不是一个有效的括号序列</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBrackets</span><span class="params">(String s)</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>维护一个 stack，存放 char。在遍历 s 的过程中，不断对遇到左括号进行 push，右括号进行 pop。当最后 stack 为空的时候说明是合法的括号序列.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBrackets</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'['</span> || s.charAt(i) == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">        stack.push(s.charAt(i));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span> &amp;&amp; stack.peek() != <span class="string">'('</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">']'</span> &amp;&amp; stack.peek() != <span class="string">'['</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">'&#125;'</span> &amp;&amp; stack.peek() != <span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        stack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给你一个括号序列，里面包含小括号，中括号和大括号。你要判断这个括号序列是否有效。有效的括号序列要求，每个左括号都必须有一个同类的右括号与它正确配对。另外，空字符串认为是有效的括号序列。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈实现队列</title>
    <link href="https://razertory.me/2019/11/10/queue-by-stack/"/>
    <id>https://razertory.me/2019/11/10/queue-by-stack/</id>
    <published>2019-11-10T01:45:31.000Z</published>
    <updated>2020-03-28T13:02:10.012Z</updated>
    
    <content type="html"><![CDATA[<p>维护一个 in，out 栈表示进出顺序，实现一个从 in 到 out 的转移方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; in, out;</span><br><span class="line"></span><br><span class="line">    MyQueue() &#123;</span><br><span class="line">        in = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        out = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        in.push(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        transferIfEmpty();</span><br><span class="line">        <span class="keyword">return</span> out.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        transferIfEmpty();</span><br><span class="line">        <span class="keyword">return</span> out.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> in.isEmpty() &amp;&amp; out.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferIfEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(out.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!in.empty()) &#123;</span><br><span class="line">                out.push(in.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;维护一个 in，out 栈表示进出顺序，实现一个从 in 到 out 的转移方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
  </entry>
  
</feed>

---
layout: post
title:  "计算机系统之并发"
date:   2017-11-30 0:21:00 +0800
categories: jekyll update
---
一直以来都想写一篇详实的、充分的、逻辑清晰的关于OS Concurrency的文章。每天都在和并发的东西打交道，包括编程语言，并发模型，unix 操作系统中的各种api。本文一方面将站在计算机科学角度，去详解OS Concurrency；另一方面去结合足够的工程用例，比如说大多数程序员用到的系统调用，编程语言、框架等来清晰描述这个庞大复杂的计算机并发体系。

---

文章中涉及的内容有：
* 编程语言 Java, Go, Python, Ruby, Lua, Rust, Erlang
* 框架/库 Netty, Nginx, Jetty, Tomcat, Rails, OTP
* 操作系统 select, poll, epoll, kqueue, 进程，线程，协程,IO多路复用
* 概念 同步，异步，阻塞，非阻塞，事件驱动，NIO, BIO, 全局解释锁GIL

笔者才疏学浅，若有含糊不清或者有误之处，望指正。

---

> 如果逻辑控制流在时间上重叠，那么它们就是并发的(concurrent) -- 《深入理解计算机系统》第二版

我们每天都在和并发打交道,比如当你用浏览器打开这篇文章的时候,你的音乐播放器正在放歌,你的slack正在接收消息，你的脚本正在执行...你正在访问的这个站点，或许不只你一个人正在看着，对这个站点所在的服务器而言，多个人同时打开这篇文章的逻辑流也是并发的。我们不得不为前人在计算机多任务处理上所做出的贡献表示致敬。如果没有他们作出的努力，用户很难享受到高效率便捷的各种应用服务，部分开发人员很难高效实现一些并发的业务。或许你是Rails程序员，Java生态的老手，Django用户，游戏开发从业者...这篇文章将从系统层面一个接着一个去给很多主流的语言，框架做一些深度的关联。

有些东西用语言着实很难描述，这种内容笔者会尽可能用图的方式来讲述。

## 函数(FUNCTION)
绝大多数的编程语言，一定会有一个中文名为方法/函数的东西，这里我叫它func(function)它将一个业务逻辑放在一起，这个func可能会去输出一些内容或者修改一些数据。它可能会被调用(call)一次，也可能被调用多次。调用一次我们都很清楚,从系统层次的角度讲，无非就是逻辑指令交给了CPU，然后CPU依照这些指令去完成任务。那么，当事情稍微复杂一点，也就是说，这个func可能不只被一个地方用到了，而是两个，更有趣的是，这两个地方是同时调用了它。那么这种情况，如果你是系统工程师，会怎么设计实现呢？

首先，这两个调用func的地方都希望能够立即获得期望的反馈，所谓的期望的，就是指比如这个func的功能就是计算两个传入的int参数的sum，那么期望的反馈，就一定是这两个数的sum，它不能有误，更不能返回一些奇奇怪怪的东西。当然，也不能慢，也就是说同时的两个调用花的时间要和一个调用是一样的。

这里回到上面引用的句子，我们把函数理解为’逻辑流‘，那么此时的并发可以理解为`在时间上重叠的函数，我们就认为是并发的`。

## 进程(PROCCESS)
## IO多路复用(MULTIPLEXING) || 事件驱动(EVEN DRIVEN)
## 线程(THREAD)
## 协程(COROUTINE)

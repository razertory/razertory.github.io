---
layout: post
title:  "GraphQL in Ruby"
date:   2018-1-20 0:21:00 +0800
categories: jekyll update
---
时间大概是17年九月，我司的新App开工。在技术选型上，我们很激进地选择了`Graphql` instead of Restful。当时想到的理由是很简单，但是也无可厚非的：我们的App和后期将要做的新Web在业务上有很大的相通性，并且功能模块有不少类似的地方，所以用Graphql这样的技术来做API层会在复用性会很高。后期在做一些管理后台的时候，效率也会高不少。

很有幸的是，自己成了这块业务的'负责人'，也算是在研发团队中做了这个技术的主要推进者。我们的服务端主语言是Ruby，所以像github，shopify这样的GraphQL+Ruby的领先者对我们而言如同教科书一般。我研究了几乎每个Github的Query和Mutation，所以很大程度上也受益于他们优质的思路，和客户端同学们踩了一些坑，最后也都得出了这个在开发过程中，很多方面都会优于rustful的结论。具体的优势，在网上差不多是众所周知的，我也不愿再赘述。这篇博客，更多的是关于技术的感悟和一些架构上的理念。吹架构可能有点悬乎。好吧，就再抽象一点，应该是做工程的一些总结；当然Rails + GraphQL的干货内容也不会少的。

Ruby在编程表达能力上，几乎是我见过的所有服务端语言中最高的。强大的元编程加上Rails生态的所向披靡，几乎算得上是互联网创业公司的神兵利器。当然，语言这种东西，好坏得看上下文的，不同的话在不同的语境中效果还是不一样的。至少对于我司的业务和人员编制，加上对于往后一年的预估，大家也都对技术选型达成了一致。我们需要技术团队有强大的业务推进能力，并且能做出高效稳定的服务。

现在看来，这样的选择没有错。我已经将rc环境的graphql api 开放。http://rc.kid17.com:10000

随着产品的重构和业务的迁移，我们的流量开始逐步转向graphql服务，各个规范也建立起来。随着业务模块的复杂度增高，用户数量的增加和数据量的增大，新一轮的挑战即将开始。首先就是要把这个巨大复杂的Rails+GraphQL项目拆掉，第二个就是确定新的架构，第三点就是拥抱变化，让这个服务本身变得可以维护，扩展和改进。

> 东西早晚要坏的，这就是生活。
